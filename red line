int_stop (int delaySec, int delayMicro){ // waits for 3 seconds
	sleep1(delaySec, delayMicro);
	set_motor(1,0);
	set_motor(2,0);
	return 0;
}
 
int detect_red(){

int adc_reading ;
int Red = 0;
int Green = 0;
int Blue = 0;

int delaySec = 0 ; //temp
int delayMicro = 0; //temp

int MinRed = 150; // minimum value for red
int MaxGB = 100; // max value for green and blue
boolean 
ROrNot = false;
int LinePos = 0;

int GateClosed = 50; // min value for how far gate is
bool go = true;

int rows = 320;
int col = 240;
int posCol = col - 10;

take_picture();

for(int i=0; i < rows; i++){ // the left half of the image is negative and the right is positive numbers

Red = get_pixel(col - posCol, i, 0); // gets the RED
Green = get_pixel(col - posCol, i, 1); // gets the GREEN
Blue = get_pixel(col - posCol, i, 2); // gets the BLUE
				
if ((Red >= MinRed )&& (Green =< MaxGB) && (Blue =< MaxGB) ){
	ROrNot = 1; // red line 
	int_stop; 
	}
	else{
	ROrNot = 0; //not red 
	}
} 
	adc_reading = read_analog(0);
 
if (ROrNot && adc_reading =< GateClosed){
	for (adc_reading > GateClosed){ 
		int_stop;
		int
		}
}
}

	
